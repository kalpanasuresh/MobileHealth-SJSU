<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataObjects</name>
    </assembly>
    <members>
        <member name="T:DoFactory.DataLayer.DataObjects.DaoFactory">
            <summary>
            Abstract factory class that creates data access objects.
            
            GoF Design Pattern: Factory.
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.DaoFactory.CustomerDao">
            <summary>
            Gets a customer data access object.
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.DaoFactory.DoctorDao">
            <summary>
            Gets a product data access object.
            </summary>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.DaoFactories">
            <summary>
            Factory of factories. This class is a factory class that creates
            data-base specific factories which in turn create data acces objects.
            
            GoF Design Patterns: Factory.
            </summary>
            <remarks>
            This is the abstract factory design pattern applied in a hierarchy
            in which there is a factory of factories.
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.DaoFactories.GetFactory(System.String)">
            <summary>
            Gets a provider specific (i.e. database specific) factory 
            
            GoF Design Pattern: Factory
            </summary>
            <param name="dataProvider">Database provider.</param>
            <returns>Data access object factory.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IPatientDao.GetPatients">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IPatientDao.GetPatients(System.String)">
            <summary>
            Gets a sorted list of all customers.
            </summary>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of customers.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IPatientDao.GetPatient(System.Int32)">
            <summary>
            Gets a customer.
            </summary>
            <param name="customerId">Unique customer identifier.</param>
            <returns>Customer.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IPatientDao.InsertPatient(DoFactory.BusinessLayer.BusinessObjects.Patient)">
            <summary>
            Inserts a new customer. 
            </summary>
            <remarks>
            Following insert, customer object will contain the new identifier.
            </remarks>
            <param name="customer">Customer.</param>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao">
            <summary>
            Sql Server specific data access object that handles data access
            of categories and products.
            </summary>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.IProductDao">
            <summary>
            Defines methods to access categories and products.
            This is a database-independent interface. The implementations will 
            be database specific.
            </summary>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IProductDao.GetCategories">
            <summary>
            Gets a list of product categories.
            </summary>
            <returns>List of product categories.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IProductDao.GetProductsByCategory(System.Int32,System.String)">
            <summary>
            Gets a list of products for a given category.
            </summary>
            <param name="categoryId">Unique category identifier.</param>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of products.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IProductDao.SearchProducts(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Performs a search for products given several criteria.
            </summary>
            <param name="productName">Product name criterium.</param>
            <param name="priceFrom">Low end of price range.</param>
            <param name="priceThru">High end of price range.</param>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of products.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IProductDao.GetProduct(System.Int32)">
            <summary>
            Gets a product.
            </summary>
            <param name="productId">Unique product identifier.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IProductDao.GetCategoryByProduct(System.Int32)">
            <summary>
            Gets a product category for a given product.
            </summary>
            <param name="productId">Unique product identifier.</param>
            <returns>Product category.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao.GetCategories">
            <summary>
            Gets a list of categories.
            </summary>
            <returns>Category list.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao.GetProductsByCategory(System.Int32,System.String)">
            <summary>
            Gets a list of products for a given category.
            </summary>
            <param name="categoryId">Unique category identifier.</param>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of products.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao.SearchProducts(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
            <summary>
            Performs a search for products given several criteria.
            </summary>
            <param name="productName">Product name criterium.</param>
            <param name="priceFrom">Low end of price range.</param>
            <param name="priceThru">High end of price range.</param>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of products.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao.GetProductList(System.String)">
            <summary>
            Gets a product list. A private helper method.
            </summary>
            <param name="sql">Sql statement.</param>
            <returns>List of products.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao.GetProduct(System.Int32)">
            <summary>
            Gets a product.
            </summary>
            <param name="id">Unique product identifier.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerProductDao.GetCategoryByProduct(System.Int32)">
            <summary>
            Gets a category for a given product.
            </summary>
            <param name="productId">Unique product identifier.</param>
            <returns>Category.</returns>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.DataAccess">
            <summary>
            This class shields the client from the details of database specific 
            data-access objects. It returns the appropriate data-access objects 
            according to the configuration in web.config.
            
            GoF Design Patterns: Factory, Singleton, Proxy.
            </summary>
            <remarks>
            This class makes extensive use of the Factory pattern in determining which 
            database specific DAOs (Data Access Objects) to return.
            
            This class is like a Singleton -- it is a static class (Shared in VB) and 
            therefore only one 'instance' ever will exist.
            
            This class is a Proxy in that it 'stands in' for the actual Data Access Object Factory.
            </remarks>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.DataAccess.CustomerDao">
            <summary>
            Gets a provider specific customer data access object.
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.DataAccess.DoctorDao">
            <summary>
            Gets a provider specific order data access object.
            </summary>
            <summary>
            Gets a provider specific product data access object.
            </summary>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IDoctorDao.InsertDoctor(DoFactory.BusinessLayer.BusinessObjects.Doctor)">
            <summary>
            Inserts a new customer. 
            </summary>
            <remarks>
            Following insert, customer object will contain the new identifier.
            </remarks>
            <param name="customer">Customer.</param>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerPatientDao.GetPatient(System.Int32)">
            <summary>
            
            </summary>
            <param name="PatientID"></param>
            <returns></returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerPatientDao.InsertPatient(DoFactory.BusinessLayer.BusinessObjects.Patient)">
            <summary>
            
            </summary>
            <param name="patient"></param>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDoctorDao.GetDoctor(System.String)">
            <summary>
            
            </summary>
            <param name="PatientID"></param>
            <returns></returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDoctorDao.InsertDoctor(DoFactory.BusinessLayer.BusinessObjects.Doctor)">
            <summary>
            
            </summary>
            <param name="patient"></param>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.Db">
            <summary>
            Class that manages all lower level ADO.NET data base access.
            
            GoF Design Patterns: Singleton, Factory, Proxy.
            </summary>
            <remarks>
            This class is a 'swiss army knife' of data access. It handles all the 
            database access details and shields its complexity from its clients.
            
            The Factory Design pattern is used to create database specific instances
            of Connection objects, Command objects, etc.
            
            This class is like a Singleton -- it is a static class (Shared in VB) and 
            therefore only one 'instance' ever will exist.
            
            This class is a Proxy in that it 'stands in' for the actual DbProviderFactory.
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.Update(System.String)">
            <summary>
            Executes Update statements in the database.
            </summary>
            <param name="sql">Sql statement.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.Insert(System.String,System.Boolean)">
            <summary>
            Executes Insert statements in the database. Optionally returns new identifier.
            </summary>
            <param name="sql">Sql statement.</param>
            <param name="getId">Value indicating whether newly generated identity is returned.</param>
            <returns>Newly generated identity value (autonumber value).</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.Insert(System.String)">
            <summary>
            Executes Insert statements in the database.
            </summary>
            <param name="sql">Sql statement.</param>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.GetDataSet(System.String)">
            <summary>
            Populates a DataSet according to a Sql statement.
            </summary>
            <param name="sql">Sql statement.</param>
            <returns>Populated DataSet.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.GetDataTable(System.String)">
            <summary>
            Populates a DataTable according to a Sql statement.
            </summary>
            <param name="sql">Sql statement.</param>
            <returns>Populated DataTable.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.GetDataRow(System.String)">
            <summary>
            Populates a DataRow according to a Sql statement.
            </summary>
            <param name="sql">Sql statement.</param>
            <returns>Populated DataRow.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.GetScalar(System.String)">
            <summary>
            Executes a Sql statement and returns a scalar value.
            </summary>
            <param name="sql">Sql statement.</param>
            <returns>Scalar value.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.SelectQuery(System.String,System.String[],System.String[])">
            <returns>A DataSet containing the results of the query</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.GetTableName(System.String)">
            <summary>
            Transforms three letter acronym into actual table name.
            </summary>
            <param name="strTableName">A 3 character string value representing a table name.</param>		
            <returns>A string value containing the actual table name</returns>
            /// <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            Pseudocode follows below.
            <code>
            Begin
            	Determine table name based on passed string value
            	return full table name
            End
            </code>
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.BuildSelectQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds Select statement.
            </summary>
            <param name="strTableName">A 3 character string value representing the table name</param>
            <param name="strArrSelectValues">An array of strings containg the fields to be selected</param>
            <param name="strArrWhereValues">An array of strings containing field names and search values to be searched on</param>
            <returns>A string value containing the SQL select statement.</returns>
            <remarks>
            strArrWhereValues should contain the field and search value in consecutive pairs.
            strTableName should only contain the values that follow below. The meaning of the values are listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code> 
            Pseudocode follows below.
            <code>
            Begin
            	Determine if there is a single search value.
            		Determine if it is a select all.
            			Build first part of select all query.
            		Else
            			Build first part of select query.
            		End Determine
            	Else
            		Build first select value into query.
            		For each remaing value.
            			Add value to query.
            		End For
            	End Determine
            	Determine if there is a single value to search by.
            		Return query.
            	Else
            		Add first search field/value pair to query
            		For each remaining field/value pair
            			Add field/value pair to query.
            		End For.
            		Return query.
            	End Determine
            End			
            </code>
            Note that strArrSelectValues should only contain a single element that is null if the select is a select all.
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.InsertQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds and executes an Insert query.
            </summary>
            <param name="strTableName">A 3 character field representing the table that the query will run against.</param>
            <param name="strFields">An array of string values representing fields to be inserted.</param>
            <param name="strValues">An array of string values representing values to be inserted</param>
            /// <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            Note that for strValue, values that are string fields in the database must be enclosed in single quotes ("'").
             Pseudocode follows below.
            <code>
            Begin
            	Get Insert query.
            	ExecuteInsert query.
            End					
            </code>
            </remarks>
            <example>
            Below is an example of the usage of this method.
            <code>
            Internweb.DBManipulator dbMangler = new Internweb.DBManipulator();
            
            dbMangler.InsertQuery("IDT", strArrayOfFieldsToInsert, strArrayOfValuesToInsert);
            </code>
            </example>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.BuildInsertQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds an Insert query.
            </summary>
            <param name="strTableName">A 3 character field representing the table that the query will run against.</param>
            <param name="strFields">An array of string values representing fields to be inserted.</param>
            <param name="strValues">An array of string values representing values to be inserted</param>
            <returns>A string value containing the Insert query</returns>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            Pseudocode follows below.
            <code>
            Begin
            	Add first part of insert query.
            	For each field
            		Add field to query
            	End For.
            	Begin value section of query
            	For each value
            		Add value to query.
            	End For.
            	Finalize query.
            	Return query.
            End
            </code>
            Note that for strValue, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.DeleteQuery(System.String,System.String[])">
            <summary>
            Builds and executes a delete query
            </summary>
            <param name="strTableName">A 3 character string value representing a table name</param>
            <param name="strFieldValuePair">An array of string values containing field/value pairs</param>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strFieldValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build SQL Delete query.
            	Execute SQL Delete query.
            End
            </code>
            Note that for strFieldValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
            <example>
            An example of the usage of this method follows below.
            <code>
            Internweb.DBManipulator dbMangler = new DBManipulator();
            
            dbMangler.DeleteQuery("IDT", strArrayOfFieldValuePairs);
            </code>
            </example>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.BuildDeleteQuery(System.String,System.String[])">
            <summary>
            Builds a SQL delete query
            </summary>
            <param name="strTableName">A 3 character string value representing a table name</param>
            <param name="strFieldValuePair">An array of string values containing field/value pairs</param>
            <returns>A string value containg a SQL Delete query.</returns>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strFieldValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build first half of Delete query.
            	Add first field/value pair to query.
            	For each remaining field/value pair
            		Add field/value pair to query
            	End For.
            	Return query.
            End
            </code>
            Note that for strFieldValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.UpdateQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds and executes a SQL Update query.
            </summary>
            <param name="strTableName">A 3 character string value representing a table.</param>
            <param name="strSetValuePair">An array of field/value pairs to update in the table.</param>
            <param name="strWhereValuePair">An array of field/value pairs to qualify the update operation.</param>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strSetValuePair and strWhereValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build SQL Update query.
            	Execute SQL Update query.
            End
            </code>
            Note that for strWhereValuePair and strSetValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
            <example>
            An example of the usage of this method follows below.
            <code>
            Internweb.DBManipulator dbMangler = new DBManipulator();
            
            dbMangler.UpdateQuery("IDT", strArrayOfSetValuePairs, strArrayOfWhereValuePairs);
            </code>
            </example>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.BuildUpdateQuery(System.String,System.String[],System.String[])">
            <summary>
            Build a SQL Update query
            </summary>
            <param name="strTableName">A 3 character string value representing a table.</param>
            <param name="strSetValuePair">An array of field/value pairs to update in the table.</param>
            <param name="strWhereValuePair">An array of field/value pairs to qualify the update operation.</param>
            <returns>A string value containing a SQL Update query</returns>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strSetValuePair and strWhereValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build first part of Update query.
            	For each SET field/value pair
            		Add SET field/value pair to query.
            	End For
            	Add WHERE portion of query and add first WHERE field/value pair.
            	For each WHERE field/value pair
            		Add field/value pair to query.
            	End For.
            	Return Update query.
            End
            </code>
            Note that for strWhereValuePair and strSetValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.Escape(System.String)">
            <summary>
            Escapes an input string for database processing, that is, 
            surround it with quotes and change any quote in the string to 
            two adjacent quotes (i.e. escape it). 
            If input string is null or empty a NULL string is returned.
            </summary>
            <param name="s">Input string.</param>
            <returns>Escaped output string.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.Db.Escape(System.String,System.Int32)">
            <summary>
            Escapes an input string for database processing, that is, 
            surround it with quotes and change any quote in the string to 
            two adjacent quotes (i.e. escape it). 
            Also trims string at a given maximum length.
            If input string is null or empty a NULL string is returned.
            </summary>
            <param name="s">Input string.</param>
            <param name="maxLength">Maximum length of output string.</param>
            <returns>Escaped output string.</returns>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDaoFactory">
            <summary>
            Sql Server specific factory that creates Sql Server specific data access objects.
            
            GoF Design Pattern: Factory.
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDaoFactory.CustomerDao">
            <summary>
            Gets a Sql server specific customer data access object.
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDaoFactory.DoctorDao">
            <summary>
            Gets a Sql server specific product data access object.
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDaoFactory.PatientDao">
            <summary>
            
            </summary>
        </member>
        <member name="P:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerDaoFactory.AppointmentDao">
            <summary>
            
            </summary>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.IOrderDao">
            <summary>
            Defines methods to access orders and order details.
            This is a database-independent interface. The implementations will 
            be database specific.
            </summary>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IOrderDao.GetOrderStatistics(System.Collections.Generic.IList{DoFactory.BusinessLayer.BusinessObjects.Customer},System.String)">
            <summary>
            Gets customers with order statistics in given sort order.
            </summary>
            <param name="customers">Customer list.</param>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of customers with order statistics.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IOrderDao.GetOrderStatistics(System.Collections.Generic.IList{DoFactory.BusinessLayer.BusinessObjects.Customer})">
            <summary>
            Gets a list of customers with order summary statistics.
            </summary>
            <param name="customers">Customer list.</param>
            <returns>Customer list with order summary statistics.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IOrderDao.GetOrders(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Gets all orders for a customer.
            </summary>
            <param name="customer">Customer.</param>
            <returns>List of orders.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IOrderDao.GetOrdersByDate(System.DateTime,System.DateTime)">
            <summary>
            Gets a list of orders placed within a date range.
            </summary>
            <param name="dateFrom">Date range begin date.</param>
            <param name="dateThru">Date range end date.</param>
            <returns>List of orders.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IOrderDao.GetOrderDetails(DoFactory.BusinessLayer.BusinessObjects.Order)">
            <summary>
            Gets a list of order details for a given order.
            </summary>
            <param name="order">Unique order identifier.</param>
            <returns>List of order details.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.IOrderDao.GetOrder(System.Int32)">
            <summary>
            Gets an order.
            </summary>
            <param name="orderId">Unique order identifier.</param>
            <returns>Order.</returns>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.ICustomerDao">
            <summary>
            Defines methods to access and maintain customer data.
            This is a database-independent interface. The implementations will 
            be database specific.
            </summary>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.GetCustomers">
            <summary>
            Gets a list of all customers.
            </summary>
            <returns>List of customers.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.GetCustomers(System.String)">
            <summary>
            Gets a sorted list of all customers.
            </summary>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of customers.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.GetCustomer(System.Int32)">
            <summary>
            Gets a customer.
            </summary>
            <param name="customerId">Unique customer identifier.</param>
            <returns>Customer.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.GetCustomerByOrder(DoFactory.BusinessLayer.BusinessObjects.Order)">
            <summary>
            Gets customer given an order.
            </summary>
            <param name="order">Order.</param>
            <returns>Customer.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.InsertCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Inserts a new customer. 
            </summary>
            <remarks>
            Following insert, customer object will contain the new identifier.
            </remarks>
            <param name="customer">Customer.</param>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.UpdateCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Updates a customer.
            </summary>
            <param name="customer">Customer.</param>
            <returns>Number of customer records updated.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.ICustomerDao.DeleteCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Deletes a customer
            </summary>
            <param name="customer">Customer.</param>
            <returns>Number of customer records deleted.</returns>
        </member>
        <member name="T:Internweb.DBManipulator">
            <summary>
            DBManipulator provides database manipulation functions to the Internweb
             project. 
            </summary>
        </member>
        <member name="F:Internweb.DBManipulator.dbConnection">
            <summary>
            Provides connection to the appointment_maker database.
            </summary>
        </member>
        <member name="M:Internweb.DBManipulator.#ctor">
            <summary>
            Constructor for DBManipulator object. Accepts no arguments
            </summary>
        </member>
        <member name="M:Internweb.DBManipulator.#ctor(System.String)">
            <summary>
            Constructor for DBManipulator object. Accepts 1 argument
            </summary>
            <param name="strConnection">A string value containing the connection string for the database.</param>
        </member>
        <member name="M:Internweb.DBManipulator.SelectQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds and executes a select query against the appointment_maker database.
            </summary>
            <param name="strTableName">A 3 character string value that represents the name of the table being queried</param>
            <param name="strArrSelectValues">Array of fields to select</param>
            <param name="strArrWhereValues">Array of fields and values to qualify query.</param>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strArrWhereValues should contain the field and search value in consecutive pairs.
            </remarks>
            <example>
            Here is an example of how to use the DBManipulator.SelectQuery method.
            <code>
            Internweb.DBManipulator dbMangler = new Internweb.DBManipulator();
            DataSet dsDataSet = new DataSet();
            
            dsDataSet = dbMangler.SelectQuery("IDT", strArrayOfFields, strArrayOfSearchFieldsAndValues);
            </code>
            Here is the pseudocode for the method.
            <code>
            Begin
            	Get Select Query
            	Execute Query
            	Return Dataset
            End
            </code>
            </example>
            <returns>A DataSet containing the results of the query</returns>
        </member>
        <member name="M:Internweb.DBManipulator.GetTableName(System.String)">
            <summary>
            Transforms three letter acronym into actual table name.
            </summary>
            <param name="strTableName">A 3 character string value representing a table name.</param>		
            <returns>A string value containing the actual table name</returns>
            /// <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            Pseudocode follows below.
            <code>
            Begin
            	Determine table name based on passed string value
            	return full table name
            End
            </code>
            </remarks>
        </member>
        <member name="M:Internweb.DBManipulator.BuildSelectQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds Select statement.
            </summary>
            <param name="strTableName">A 3 character string value representing the table name</param>
            <param name="strArrSelectValues">An array of strings containg the fields to be selected</param>
            <param name="strArrWhereValues">An array of strings containing field names and search values to be searched on</param>
            <returns>A string value containing the SQL select statement.</returns>
            <remarks>
            strArrWhereValues should contain the field and search value in consecutive pairs.
            strTableName should only contain the values that follow below. The meaning of the values are listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code> 
            Pseudocode follows below.
            <code>
            Begin
            	Determine if there is a single search value.
            		Determine if it is a select all.
            			Build first part of select all query.
            		Else
            			Build first part of select query.
            		End Determine
            	Else
            		Build first select value into query.
            		For each remaing value.
            			Add value to query.
            		End For
            	End Determine
            	Determine if there is a single value to search by.
            		Return query.
            	Else
            		Add first search field/value pair to query
            		For each remaining field/value pair
            			Add field/value pair to query.
            		End For.
            		Return query.
            	End Determine
            End			
            </code>
            Note that strArrSelectValues should only contain a single element that is null if the select is a select all.
            </remarks>
        </member>
        <member name="M:Internweb.DBManipulator.InsertQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds and executes an Insert query.
            </summary>
            <param name="strTableName">A 3 character field representing the table that the query will run against.</param>
            <param name="strFields">An array of string values representing fields to be inserted.</param>
            <param name="strValues">An array of string values representing values to be inserted</param>
            /// <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            Note that for strValue, values that are string fields in the database must be enclosed in single quotes ("'").
             Pseudocode follows below.
            <code>
            Begin
            	Get Insert query.
            	ExecuteInsert query.
            End					
            </code>
            </remarks>
            <example>
            Below is an example of the usage of this method.
            <code>
            Internweb.DBManipulator dbMangler = new Internweb.DBManipulator();
            
            dbMangler.InsertQuery("IDT", strArrayOfFieldsToInsert, strArrayOfValuesToInsert);
            </code>
            </example>
        </member>
        <member name="M:Internweb.DBManipulator.BuildInsertQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds an Insert query.
            </summary>
            <param name="strTableName">A 3 character field representing the table that the query will run against.</param>
            <param name="strFields">An array of string values representing fields to be inserted.</param>
            <param name="strValues">An array of string values representing values to be inserted</param>
            <returns>A string value containing the Insert query</returns>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            Pseudocode follows below.
            <code>
            Begin
            	Add first part of insert query.
            	For each field
            		Add field to query
            	End For.
            	Begin value section of query
            	For each value
            		Add value to query.
            	End For.
            	Finalize query.
            	Return query.
            End
            </code>
            Note that for strValue, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
        </member>
        <member name="M:Internweb.DBManipulator.DeleteQuery(System.String,System.String[])">
            <summary>
            Builds and executes a delete query
            </summary>
            <param name="strTableName">A 3 character string value representing a table name</param>
            <param name="strFieldValuePair">An array of string values containing field/value pairs</param>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strFieldValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build SQL Delete query.
            	Execute SQL Delete query.
            End
            </code>
            Note that for strFieldValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
            <example>
            An example of the usage of this method follows below.
            <code>
            Internweb.DBManipulator dbMangler = new DBManipulator();
            
            dbMangler.DeleteQuery("IDT", strArrayOfFieldValuePairs);
            </code>
            </example>
        </member>
        <member name="M:Internweb.DBManipulator.BuildDeleteQuery(System.String,System.String[])">
            <summary>
            Builds a SQL delete query
            </summary>
            <param name="strTableName">A 3 character string value representing a table name</param>
            <param name="strFieldValuePair">An array of string values containing field/value pairs</param>
            <returns>A string value containg a SQL Delete query.</returns>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strFieldValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build first half of Delete query.
            	Add first field/value pair to query.
            	For each remaining field/value pair
            		Add field/value pair to query
            	End For.
            	Return query.
            End
            </code>
            Note that for strFieldValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
        </member>
        <member name="M:Internweb.DBManipulator.UpdateQuery(System.String,System.String[],System.String[])">
            <summary>
            Builds and executes a SQL Update query.
            </summary>
            <param name="strTableName">A 3 character string value representing a table.</param>
            <param name="strSetValuePair">An array of field/value pairs to update in the table.</param>
            <param name="strWhereValuePair">An array of field/value pairs to qualify the update operation.</param>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strSetValuePair and strWhereValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build SQL Update query.
            	Execute SQL Update query.
            End
            </code>
            Note that for strWhereValuePair and strSetValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
            <example>
            An example of the usage of this method follows below.
            <code>
            Internweb.DBManipulator dbMangler = new DBManipulator();
            
            dbMangler.UpdateQuery("IDT", strArrayOfSetValuePairs, strArrayOfWhereValuePairs);
            </code>
            </example>
        </member>
        <member name="M:Internweb.DBManipulator.BuildUpdateQuery(System.String,System.String[],System.String[])">
            <summary>
            Build a SQL Update query
            </summary>
            <param name="strTableName">A 3 character string value representing a table.</param>
            <param name="strSetValuePair">An array of field/value pairs to update in the table.</param>
            <param name="strWhereValuePair">An array of field/value pairs to qualify the update operation.</param>
            <returns>A string value containing a SQL Update query</returns>
            <remarks>
            strTableName should only contain the values that follow below. The meaning of the values is also listed below.
            <code>
            IDT = Instructor_Data_Table
            SDT = Student_Data_Table
            DDT = Day_Data_Table
            SAT = Student_Appointment_Table
            TDT = Time_Data_Table
            </code>
            strSetValuePair and strWhereValuePair should contain pairs of fields and values in consecutive order. Pseudocode follows below
            <code>
            Begin
            	Build first part of Update query.
            	For each SET field/value pair
            		Add SET field/value pair to query.
            	End For
            	Add WHERE portion of query and add first WHERE field/value pair.
            	For each WHERE field/value pair
            		Add field/value pair to query.
            	End For.
            	Return Update query.
            End
            </code>
            Note that for strWhereValuePair and strSetValuePair, values that are string fields in the database must be enclosed in single quotes ("'").
            </remarks>
        </member>
        <member name="M:Internweb.DBManipulator.SelectLike(System.String)">
            <summary>
            Builds and executes a specialized SELECT query with the LIKE keyword.
            </summary>
            <param name="strSearchCharacter">A single alphabetic character.</param>
            <returns>A DataSet containing the results of the query.</returns>
            <remarks>
            Pseudocode follows below
            <code>
            Begin
            	Build select query.
            	Fill dataset.
            	Return dataset.
            End
            </code>
            </remarks>
            <example>
            An example of this method's use follows below.
            <code>
            Internweb.DBManipulator dbMangler = new DBManipulator();
            
            dbMangler.SelectLike("A"); 
            </code>
            </example>
        </member>
        <member name="T:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao">
            <summary>
            Sql Server specific data access object that handles data access
            of customers.
            </summary>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.GetCustomers">
            <summary>
            Gets a list of all customers.
            </summary>
            <returns>Customer list.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.GetCustomers(System.String)">
            <summary>
            Gets a sorted list of all customers.
            </summary>
            <param name="sortExpression">Sort order.</param>
            <returns>Sorted list of customers.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.GetCustomer(System.Int32)">
            <summary>
            Gets a customer.
            </summary>
            <param name="customerId">Unique customer identifier.</param>
            <returns>Customer.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.GetCustomerByOrder(DoFactory.BusinessLayer.BusinessObjects.Order)">
            <summary>
            Gets customer given an order.
            </summary>
            <param name="order">Order.</param>
            <returns>Customer.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.InsertCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Inserts a new customer. 
            </summary>
            <remarks>
            Following insert, customer object will contain new identifier.
            </remarks>
            <param name="customer">Customer.</param>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.UpdateCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Updates a customer.
            </summary>
            <param name="customer">Customer.</param>
            <returns>Number of customer records updated.</returns>
        </member>
        <member name="M:DoFactory.DataLayer.DataObjects.SqlServer.SqlServerCustomerDao.DeleteCustomer(DoFactory.BusinessLayer.BusinessObjects.Customer)">
            <summary>
            Deletes a customer
            </summary>
            <param name="customer">Customer.</param>
            <returns>Number of customer records deleted.</returns>
        </member>
    </members>
</doc>
